Tarefas
Passo 1
Banco
Mapeamento do que é do banco, os campos e os tipos
id (int)
titulo (string)
descrição (string)
observações (string)
realizador (string)
tempo estimado (double)
data hora inicio (datetime)
data hora fim (date time)
status (enum)

Criar os scripts e salvar em uma pasta numeradas para utilização futura


Passo 2
Criar o projeto do tipo ASP.NET Core API
Removi a controller e a model que vem no template padrão
Criar um biblioteca de classes com o NomeDoProjeto.Domian
Criar um biblioteca de classes com o NomeDoProjeto.Infra
Criar um biblioteca de classes com o NomeDoProjeto.Infra.Data
Todas as bibliotecas de classes vieram com classes padrões que foram removidas

Passo 3
appsettings.json: tem algumas variaveis pré-definidas que serão usadas na aplicação (por ex: string de conexão com o bando de dacos, que não variam) caso um dia precisem serem mudadas, irá mudar em um lugar só e irá refletir no projeto inteiro

Program: principal 

Startup: é o que configura a aplicação
Na Startup 
  Startup: Construtor
  IConfiguration: a propriedade quem tem as configurações 
  ConfigureServices: configura os serviçoes que a aplicação vai usar
  Configure: Configura a aplicação

Passo 4
Primeiro trabalhar no appsettings
após a linha do AllowedHosts coloquei uma vírgula, pulei linha e digitei:
"ConnectionString": "Server=127.0.0.1; Database=tarefas; Uid=root; Pwd=root"
Server: endereço do servidor sem a porta
Database: nome do meu database
Uid e Pwd: usuário e senha do meu banco

Criei um arquico no Projeto Tarefas.Infra para fazer o bind pegar os dados do arquivo do appsettings.json e jogar em uma classe tipada)
Os campos da minha classe tipada são identicos a classe Json, tanto nome, quanto tipo
public string ConnectionString { get; set; }


Em Startup instanciei minha classe AppSettings, fiz o bind de AppSettings de Json para que em todos os lugares que a classe for usada ela já estará preenchida

#region AppSettings

            AppSettings appSettings = new AppSettings();
            Configuration.Bind(appSettings);
            services.AddSingleton(appSettings);

            #endregion AppSettings

            services.AddControllers();

Passo 5
Swagger
clicando em cima de Tarefas.API ir em Gerenciar Pacotes Nuget e procurar por Swashbuckle.AspNetCore e fazer a instalação

Dentro de Startup em ConfigureServicea após o endregion do AppSettings (dar 2 enters)

Criar o #region do Swagger
Configurando a documentação do swagger
Obs: Foi subido para o github para poder criar a licença (não é obrigatório a lincença e nem subir para o git)

Na pasta Properties, abrir o arquivo dentro dela e o campo "launchUrl" alterar o conteúdo para "swagger"

Clicando com o botão direito no NomeDoProjeto.API, ir em Propriedades, logo depois selecionar Compilar e alterar
Em Erros e Avisos ir em
Suprimir avisos e adicionar ;1591
o 1591 suprime avisos de falta de documentação xml
Na Saída flag o check box Arquivo de documentação XML e altere para 
bin\Debug\netcoreapp3.1\Swagger.xml

Ir em Startup -> Configure
adicionar as linhas: 
app.UseSwagger();
            app.UseSwaggerUI(sw =>
            {
                sw.SwaggerEndpoint("/swagger/v1/swagger.json", "Tarefas.API");
            });

Passo 6
Em NomeDoProjeto.Infra.Data criar uma pasta com o nome DataContexts e dentro dessa pasta criar uma classe com o nome DataContext
Será responsavel pela nossa conexão com o banco de dados
Clicar em gerenciador do pacote do nuget (do projeto), em seguida colocar o MySql.Data, utilizar a Interface IDisposable que irá nos auxiliar a fechar a conexão com o banco de dados
Depois foi criado o construtor, onde será aberto a conexão e o metodo de Dispose que fecha a conexão

Em Startup -> ConfigureServices abaixo do region Swagger, criar o region DataContexts
para injetar a classe Data Context para onde eu quiser usar

#region DataContexts

            services.AddScoped<DataContext>();

            #endregion DataContexts


Passo 7
Foi criado o Controller de Tarefa
Foi criado depois um metodo que será o endpoint, após isso foi documentado usando xml
criei o command de entrada
criei o command result
criado a interface de handler e a classe handler







